# Generated by Django 4.2.7 on 2025-06-29 12:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('file_name', models.CharField(max_length=255)),
                ('minio_object_name', models.CharField(max_length=500, unique=True)),
                ('file_size', models.BigIntegerField()),
                ('file_type', models.CharField(max_length=50)),
                ('status', models.CharField(choices=[('uploaded', 'Uploaded'), ('processing', 'Processing'), ('processed', 'Processed'), ('failed', 'Failed')], default='uploaded', max_length=20)),
                ('processing_started', models.DateTimeField(blank=True, null=True)),
                ('processing_completed', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('num_pages', models.IntegerField(default=0)),
                ('total_chunks', models.IntegerField(default=0)),
                ('metadata_json', models.TextField(blank=True)),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chunk_id', models.CharField(max_length=100, unique=True)),
                ('text', models.TextField()),
                ('chunk_index', models.IntegerField()),
                ('page_number', models.IntegerField(blank=True, null=True)),
                ('start_char', models.IntegerField(blank=True, null=True)),
                ('end_char', models.IntegerField(blank=True, null=True)),
                ('metadata_json', models.TextField(blank=True)),
                ('vector_store_id', models.CharField(blank=True, max_length=100)),
                ('embedding_dim', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='rag_system.document')),
            ],
            options={
                'ordering': ['document', 'chunk_index'],
                'unique_together': {('document', 'chunk_index')},
            },
        ),
        migrations.CreateModel(
            name='QueryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_text', models.TextField()),
                ('response_text', models.TextField(blank=True)),
                ('num_results', models.IntegerField(default=0)),
                ('search_time', models.FloatField(blank=True, null=True)),
                ('total_time', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('retrieved_chunks', models.ManyToManyField(blank=True, to='rag_system.documentchunk')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
